openapi: 3.0.2
info:
  title: Customer System of Record - OpenAPI 3.0
  version: 1.0.5
servers:
  - url: http://localhost:8080/customer-service/v1
tags:
  - name: Customer
paths:
  '/customers':
    post:
      tags:
        - Customer
      operationId: createCustomer
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteCustomer'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCustomer'
        '405':
          description: Invalid input

    get:
      tags:
        - Customer
      description: ''
      operationId: getCustomers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCustomers'

  '/customers/{CustomerId}':
    get:
      tags:
        - Customer
      operationId: getCustomer
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCustomer'
        '400':
          description: Invalid ID supplied
        '404':
          description: Customer not found

    patch:
      tags:
        - Customer
      description: Update customer
      operationId: updateCustomer
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteCustomer'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCustomer'
        '405':
          description: Invalid input

  '/customers/{CustomerId}/locations':
    post:
      tags:
        - Customer
      operationId: createLocation
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteLocation'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadLocation'
        '405':
          description: Invalid input

    get:
      tags:
        - Customer
      operationId: getLocations
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadLocations'

  '/customers/{CustomerId}/contact-points':
    post:
      tags:
        - Customer
      operationId: createContactPoint
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteContactPoint'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadContactPoint'
        '405':
          description: Invalid input

    get:
      tags:
        - Customer
      operationId: getContacts
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadContactPoints'

  '/customers/{CustomerId}/roles':
    get:
      tags:
        - Customer
      operationId: getRole
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadRoles'

  '/customers/{CustomerId}/relationships':
    get:
      tags:
        - Customer
      operationId: getReleationship
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadRelationship'

components:
  schemas:

    Uuid:
      type: string
      format: uuid
      readOnly: true
      example: 3fa85f64-5717-4562-b3fc-2c963f66afa6

    WriteCustomer:
      type: object
      properties:
        Data:
          type: object
          properties:
            Customer:
              oneOf:
                - $ref: "#/components/schemas/Person"
                - $ref: "#/components/schemas/Organisation"
              discriminator:
                propertyName: CustomerType

    ReadCustomer:
      type: object
      properties:
        Data:
          type: object
          properties:
            Customer:
              oneOf:
                - $ref: "#/components/schemas/Person"
                - $ref: "#/components/schemas/Organisation"

    ReadCustomers:
      type: object
      properties:
        Data:
          type: object
          properties:
            Customer:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/Person'
                  - $ref: '#/components/schemas/Organisation'

    Person:
      required:
        - CustomerType
      type: object
      properties:
        FirstName:
          type: string
          example: Ross Poldark
        CustomerType:
          type: string
          example: Person

    Organisation:
      required:
        - CustomerType
      type: object
      properties:
        CustomerId:
          $ref: '#/components/schemas/Uuid'
        Name:
          type: string
          example: Wheal Leisure
        CustomerType:
          type: string
          example: Organisation

    WriteLocation:
      type: object
      properties:
        Data:
          type: object
          properties:
            CustomerLocation:
              $ref: '#/components/schemas/CustomerLocation'

    ReadLocation:
      type: object
      properties:
        Data:
          type: object
          properties:
            CustomerLocation:
              $ref: '#/components/schemas/CustomerLocation'

    ReadLocations:
      type: object
      properties:
        Data:
          type: object
          properties:
            Location:
              type: array
              items:
                $ref: '#/components/schemas/CustomerLocation'

    LocationRoleType:
      enum:
        - DOMICILE
        - CORRESPONDENCE

    LocationType:
      enum:
        - RESIDENCY
        - DOMICILE
        - CURRENT_LOCATION
        - PREVIOUS_LOCATION

    CustomerLocation:
      type: object
      properties:
        Locationid:
          $ref: '#/components/schemas/Uuid'
        LocationRole:
          $ref: '#/components/schemas/LocationRoleType'
        LocationType:
          $ref: '#/components/schemas/LocationType'
        Location:
          type: object
          oneOf:
            - $ref: '#/components/schemas/LocationPostalAddress'
            - $ref: '#/components/schemas/GeolocationAddress'
            - $ref: '#/components/schemas/LatitudeAddress'
            - $ref: '#/components/schemas/LongitudeAddress'
            - $ref: '#/components/schemas/LocationElectronicAddress'
          discriminator:
            propertyName: LocationType

    LocationElectronicAddress:
      required:
        - LocationType
      type: object
      properties:
        ElectronicAddress:
          type: string
          example: ross.poldark@gmail.com
        LocationType:
          type: string
          example: LocationElectronicAddress


    LocationPostalAddress:
      allOf:
        - $ref: "#/components/schemas/Address"
      required:
        - LocationType
      type: object
      properties:
        LocationType:
          type: string
          example: LocationPostalAddress

    GeolocationAddress:
      required:
        - LocationType
      type: object
      properties:
        Geolocation:
          type: string
          example: some geolocation
        LocationType:
          type: string
          example: GeolocationAddress

    LatitudeAddress:
      required:
        - LocationType
      type: object
      properties:
        LatitudeAddress:
          type: string
          example: some latitude address
        LocationType:
          type: string
          example: LatitudeAddress

    LongitudeAddress:
      required:
        - LocationType
      type: object
      properties:
        LongitudeAddress:
          type: string
          example: some latitude address
        LocationType:
          type: string
          example: LongitudeAddress


    ReadRoles:
      type: object
      properties:
        Data:
          type: object
          properties:
            Role:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/AggrementInvolvement'
                  - $ref: '#/components/schemas/CustomerRelationshipInvolvement'

    ReadRelationship:
      type: object
      properties:
        Data:
          type: object
          properties:
            Relationship:
              type: array
              items:
                $ref: '#/components/schemas/Relationship'

    WriteContactPoint:
      type: object
      properties:
        Data:
          type: object
          properties:
            Contact:
              oneOf:
                - $ref: '#/components/schemas/ElectronicAddress'
                - $ref: '#/components/schemas/PostalAddress'
                - $ref: '#/components/schemas/PhoneAddress'
                - $ref: '#/components/schemas/SocialNetworkAddress'
              discriminator:
                propertyName: ContactType

    ReadContactPoint:
      type: object
      properties:
        Data:
          type: object
          properties:
            Contact:
              oneOf:
                - $ref: '#/components/schemas/ElectronicAddress'
                - $ref: '#/components/schemas/PostalAddress'
                - $ref: '#/components/schemas/PhoneAddress'
                - $ref: '#/components/schemas/SocialNetworkAddress'

    ReadContactPoints:
      type: object
      properties:
        Data:
          type: object
          properties:
            Contact:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/ElectronicAddress'
                  - $ref: '#/components/schemas/PostalAddress'
                  - $ref: '#/components/schemas/PhoneAddress'
                  - $ref: '#/components/schemas/SocialNetworkAddress'

    ElectronicAddress:
      type: object
      required:
        - ContactType
      properties:
        ContactId:
          $ref: '#/components/schemas/Uuid'
        ContactType:
          type: string
        ElectronicAddress:
          type: string
          example: ross.poldark@gmail.com

    Address:
      type: object
      properties:
        Line1:
          type: string
        Line2:
          type: string
        Line3:
          type: string
        Line4:
          type: string

    PostalAddress:
      allOf:
        - $ref: "#/components/schemas/Address"
      type: object
      required:
        - ContactType
      properties:
        ContactId:
          $ref: '#/components/schemas/Uuid'
        ContactType:
          type: string

    PhoneAddress:
      type: object
      required:
        - ContactType
      properties:
        ContactId:
          $ref: '#/components/schemas/Uuid'
        ContactType:
          type: string
        PhoneAddress:
          type: string
          example: 0694234332434

    SocialNetworkAddress:
      type: object
      required:
        - ContactType
      properties:
        ContactId:
          $ref: '#/components/schemas/Uuid'
        ContactType:
          type: string
        SocialAddress:
          type: string
          example: '@rosspoldark'

    Relationship:
      type: object
      required:
        - ReleationshipType
      properties:
        RelationshipId:
          $ref: '#/components/schemas/Uuid'
        RelationshipType:
          type: string
          enum:
            - MARRIAGE
            - PARENT
        StartDate:
          type: string
          format: date
        EndDate:
          type: string
          format: date
        Role:
          type: array
          items:
            $ref: '#/components/schemas/Role'

    Role:
      type: object
      required:
        - RoleType
      properties:
        RoleId:
          $ref: '#/components/schemas/Uuid'
        RoleType:
          $ref: '#/components/schemas/RoleType'
        RoleName:
          type: string

        RelationshipId:
          $ref: '#/components/schemas/Uuid'
      discriminator:
        propertyName: RoleType

    CustomerRelationshipInvolvement:
      allOf:
        - $ref: "#/components/schemas/Role"
        - type: object
          properties:
            CustomerRelationshipInvolvementType:
              enum:
                - CUSTOMER_EMPLOYEE
                - SUPPLIER_BANK_EMPLOYER
                - RELATIONSHIP_MANAGER

    RoleType:
      type: string
      enum:
        - CUSTOMER_RELATIONSHIP_INVOLVEMENT
        - AGREEMENT_INVOLVEMENT

    AggrementInvolvement:
      allOf:
        - $ref: "#/components/schemas/Role"

