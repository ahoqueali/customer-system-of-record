openapi: 3.0.2
info:
  title: Customer System of Record - OpenAPI 3.0
  version: 1.0.5
servers:
  - url: /api/v1.0
tags:
  - name: Customer
paths:
  '/customers':
    post:
      tags:
        - Customer
      operationId: createCustomer
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteCustomer'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCustomer'
        '405':
          description: Invalid input

    get:
      tags:
        - Customer
      description: ''
      operationId: getCustomers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCustomers'

  '/customers/{CustomerId}':
    get:
      tags:
        - Customer
      operationId: getCustomer
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
          example:
            3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCustomer'
        '400':
          description: Invalid ID supplied
        '404':
          description: Customer not found

    patch:
      tags:
        - Customer
      description: Update customer
      operationId: updateCustomer
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
          example:
            3fa85f64-5717-4562-b3fc-2c963f66afa6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteCustomer'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCustomer'
        '405':
          description: Invalid input

  '/customers/{CustomerId}/location-involvements':
    get:
      tags:
        - Customer
      operationId: getCustomerLocations
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
          example:
            3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCustomerLocationInvolvements'

  '/customers/{CustomerId}/roles':
    get:
      tags:
        - Customer
      operationId: getRole
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
          example:
            3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadRoles'

  '/customers/{CustomerId}/roles/{RoleId}/relationship':
    get:
      tags:
        - Customer
      operationId: getReleationship
      parameters:
        - name: CustomerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        - name: RoleId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
          example:
            bd30a691-84ab-4e95-9b07-afec05c78805
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadRelationship'

components:
  schemas:

    Uuid:
      type: string
      format: uuid
      minLength: 36
      maxLength: 36

    WriteCustomer:
      type: object
      properties:
        Data:
          type: object
          properties:
            Customer:
              oneOf:
                - $ref: "#/components/schemas/Person"
                - $ref: "#/components/schemas/Organisation"
          example:
            Data:
              Customer:
                CustomerType: PERSON
                FirstName: Ross Poldark

    ReadCustomer:
      type: object
      properties:
        Data:
          type: object
          properties:
            Customer:
              oneOf:
                - $ref: "#/components/schemas/Person"
                - $ref: "#/components/schemas/Organisation"
          example:
            Data:
              Customer:
                CustomerId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                CustomerType: PERSON
                FirstName: Ross Poldark

    ReadCustomers:
      type: object
      properties:
        Data:
          type: object
          properties:
            Customer:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/Person'
                  - $ref: '#/components/schemas/Organisation'
      example:
        Data:
          Customer:
            - CustomerId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
              CustomerType: PERSON
              FirstName: Ross Poldark
            - CustomerId: c0af5c6a-4c9b-4878-b4a5-527db1bf6fb8
              CustomerType: ORGANISATION
              Name: Wheal Leisure

    Customer:
      type: object
      required:
        - CustomerType
      properties:
        CustomerId:
          type: string
          format: uuid
          minLength: 36
          maxLength: 36
          readOnly: true
        CustomerType:
          type: string
          enum:
            - PERSON
            - ORGANISATION
          example: string
      discriminator:
        propertyName: CustomerType

    Person:
      allOf:
        - $ref: "#/components/schemas/Customer"
        - type: object
          properties:
            FirstName:
              type: string
              example: Ross Poldark

    Organisation:
      allOf:
        - $ref: "#/components/schemas/Customer"
        - type: object
          properties:
            Name:
              type: string
              example: Wheal Leisure

    ReadCustomerLocationInvolvements:
      type: object
      properties:
        Data:
          type: object
          properties:
            CustomerId:
              $ref: '#/components/schemas/Uuid'
            LocationInvolvementType:
              enum:
                - LOCATION_OWNER
                - LOCATION_OCCUPIER
                - ALLICANCE_PARTNER
            Location:
              $ref: '#/components/schemas/Location3'



    Location3:
      type: object
      properties:
        Description:
          type: string
        LocationAddress:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/LocationAddress'

        # CustomerLocation:
        #   type: object
        #   properties:
        #     CustomerLocationId:
        #       $ref: '#/components/schemas/Uuid'
        #     CustomerId:
        #       $ref: '#/components/schemas/Uuid'
        #     CustomerLocationType:
        #       enum:
        #         - CUSTOMER_LOCATION
        #         - CUSTOMER_CONTACT_POINT
        #     LocationType:
        #       enum:
        #         - RESIDENTIAL_ADDRESS
        #         - DOMICILE_ADDRESS
        #         - PLACE_OF_BIRTH
        #         - WORK_ADDRESS
        #         - DEVLIVERY_POINT_ADDRESS
        #     Location:
        #       type: object
        #       oneOf:
        #         - $ref: '#/components/schemas/AddressLocation'
        #         - $ref: '#/components/schemas/ContactPoint'

        #   discriminator:
        #     propertyName: CustomerLocationType

        # CustomerLocation2:
        #   allOf:
        #     - $ref: "#/components/schemas/CustomerLocation"

    # ContactPoint2:
    #   allOf:
    #     - $ref: "#/components/schemas/CustomerLocation"
    #     - type: object
    #       properties:
    #         ContactPointType:
    #           enum:
    #             - ELECTRONIC_ADDRESS
    #             - POSTAL_ADDRESS
    #             - PHONE_NUMBER
    #             - SOCIAL_NETWORK_ADDRESS

    ReadRoles:
      type: object
      properties:
        Data:
          type: object
          properties:
            Role:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/AgreementInvolvement'
                  - $ref: '#/components/schemas/CustomerRelationshipInvolvement'
          example:
            Data:
              Role:
                - RoleId: 4947cda1-89ef-4397-9166-1a888f1f93ee
                  RoleType: AGREEMENT_INVOLVEMENT
                  RoleName: string
                  RelationshipId: 7e9e0818-a854-46f5-9898-ed7f7dd47cdf
                - RoleId: 70ec950d-d7cd-4dc7-a004-46ab5cad45c2
                  RoleType: CUSTOMER_RELATIONSHIP_INVOLVEMENT
                  RoleName: string
                  RelationshipId: f714b3ed-d021-4c38-a085-5bff00c8a32c
                  CustomerRelationshipInvolvementType: CUSTOMER_EMPLOYEE

    ReadRelationship:
      type: object
      properties:
        Data:
          type: object
          properties:
            Relationship:
              type: array
              items:
                $ref: '#/components/schemas/Relationship'
      example:
        Data:
          Relationship:
            - RelationshipId: 28537f644-1f3a-4e42-9790-a377769faf75
              RelationshipType: MARRIAGE
              StartDate: 1997-07-23
              EndDate:
              Role:
                - RoleId: bd30a691-84ab-4e95-9b07-afec05c78805
                  RoleType: HUSBAND
                  CustomerId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                - RoleId: 1a5c9797-c001-4297-ad20-07c825619601
                  RoleType: WIFE
                  CustomerId: 15ca8860-66a0-48d8-96b7-1c25e18bfa93

    Location:
      type: object
      required:
        - LocationAddressType
      properties:
        LocationId:
          $ref: '#/components/schemas/Uuid'
        LocationType:
          type: string
          enum:
            - ADDRESS
            - CONTACT_POINT
      discriminator:
        propertyName: LocationType

    ContactPoint:
      allOf:
        - $ref: "#/components/schemas/Location"
      type: object
      required:
        - ContactType
      properties:
        ContactPointType:
          type: string
          enum:
            - ELECTRONIC_ADDRESS
            - POSTAL_ADDRESS
            - PHONE_ADDRESS
            - SOCIAL_NETWORK_ADDRESS


    LocationAddress:
      allOf:
        - $ref: "#/components/schemas/ContactPoint"
      type: object
      required:
        - ContactType
      properties:
        AddressType:
          type: string
          enum:
            - POSTAL_ADDRESS
            - GEOLOCATION_ADDRESS
            - LATITUDE_ADDRESS
            - LONGITUDE_ADDRESS
            - ELECTRONIC_ADDRESS

    # LocationElectronicAddress:
    #   allOf:
    #     - $ref: "#/components/schemas/AddressLocation"
    #     - type: object
    #       properties:
    #         ElectronicAddress:
    #           type: string
    #           example: ross.poldark@gmail.com

    # LocationPostalAddress:
    #   allOf:
    #     - $ref: "#/components/schemas/AddressLocation"
    #     - $ref: "#/components/schemas/Address"

    # GeolocationAddress:
    #   allOf:
    #     - $ref: "#/components/schemas/AddressLocation"
    #     - type: object
    #       properties:
    #         Geolocation:
    #           type: string
    #           example: some geolocation

    # LatitudeAddress:
    #   allOf:
    #     - $ref: "#/components/schemas/AddressLocation"
    #     - type: object
    #       properties:
    #         LatitudeAddress:
    #           type: string
    #           example: some latitude address

    # LongitudeAddress:
    #   allOf:
    #     - $ref: "#/components/schemas/AddressLocation"
    #     - type: object
    #       properties:
    #         LongitudeAddress:
    #           type: string
    #           example: some longitude address

    # ElectronicAddress:
    #   allOf:
    #     - $ref: "#/components/schemas/ContactPoint"
    #     - type: object
    #       properties:
    #         ElectronicAddress:
    #           type: string
    #           example: ross.poldark@gmail.com

    # PostalAddress:
    #   allOf:
    #     - $ref: "#/components/schemas/ContactPoint"
    #     - $ref: "#/components/schemas/Address"

    Address:
      type: object
      properties:
        Line1:
          type: string
        Line2:
          type: string
        Line3:
          type: string
        Line4:
          type: string

    PhoneAddress:
      allOf:
        - $ref: "#/components/schemas/ContactPoint"
        - type: object
          properties:
            PhoneAddress:
              type: string
              example: 0694234332434

    SocialNetworkAddress:
      allOf:
        - $ref: "#/components/schemas/ContactPoint"
        - type: object
          properties:
            SocialAddress:
              type: string
              example: '@rosspoldark'

    Relationship:
      type: object
      required:
        - RelationshipType
      properties:
        RelationshipId:
          $ref: '#/components/schemas/Uuid'
        RelationshipType:
          type: string
          enum:
            - MARRIAGE
            - PARENT
        StartDate:
          type: string
          format: date
        EndDate:
          type: string
          format: date
        Role:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role:
      type: object
      required:
        - RoleType
      properties:
        RoleId:
          $ref: '#/components/schemas/Uuid'
        RoleType:
          type: string
          enum:
            - CUSTOMER_RELATIONSHIP_INVOLVEMENT
            - AGREEMENT_INVOLVEMENT
        RoleName:
          type: string
        RelationshipId:
          $ref: '#/components/schemas/Uuid'
      discriminator:
        propertyName: RoleType

    CustomerRelationshipInvolvement:
      allOf:
        - $ref: "#/components/schemas/Role"
        - type: object
          properties:
            CustomerRelationshipInvolvementType:
              enum:
                - CUSTOMER_EMPLOYEE
                - SUPPLIER_BANK_EMPLOYER
                - RELATIONSHIP_MANAGER

    AgreementInvolvement:
      allOf:
        - $ref: "#/components/schemas/Role"

