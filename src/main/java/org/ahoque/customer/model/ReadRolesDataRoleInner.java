package org.ahoque.customer.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import org.ahoque.customer.model.AggrementInvolvement;
import org.ahoque.customer.model.CustomerRelationshipInvolvement;
import org.ahoque.customer.model.RoleType;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * ReadRolesDataRoleInner
 */

@JsonIgnoreProperties(
  value = "RoleType", // ignore manually set RoleType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the RoleType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "RoleType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AggrementInvolvement.class, name = "AggrementInvolvement"),
  @JsonSubTypes.Type(value = CustomerRelationshipInvolvement.class, name = "CustomerRelationshipInvolvement")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-07T18:21:05.499518+01:00[Europe/London]")
public class ReadRolesDataRoleInner {

  private UUID roleId;

  private RoleType roleType;

  private String roleName;

  private UUID relationshipId;

  /**
   * Gets or Sets customerRelationshipInvolvementType
   */
  public enum CustomerRelationshipInvolvementTypeEnum {
    CUSTOMER_EMPLOYEE("CUSTOMER_EMPLOYEE"),
    
    SUPPLIER_BANK_EMPLOYER("SUPPLIER_BANK_EMPLOYER"),
    
    RELATIONSHIP_MANAGER("RELATIONSHIP_MANAGER");

    private String value;

    CustomerRelationshipInvolvementTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CustomerRelationshipInvolvementTypeEnum fromValue(String value) {
      for (CustomerRelationshipInvolvementTypeEnum b : CustomerRelationshipInvolvementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private CustomerRelationshipInvolvementTypeEnum customerRelationshipInvolvementType;

  /**
   * Default constructor
   * @deprecated Use {@link ReadRolesDataRoleInner#ReadRolesDataRoleInner(RoleType)}
   */
  @Deprecated
  public ReadRolesDataRoleInner() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public ReadRolesDataRoleInner(RoleType roleType) {
    this.roleType = roleType;
  }

  public ReadRolesDataRoleInner roleId(UUID roleId) {
    this.roleId = roleId;
    return this;
  }

  /**
   * Get roleId
   * @return roleId
  */
  @Valid @Size(min = 36, max = 36) 
  @Schema(name = "RoleId", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("RoleId")
  public UUID getRoleId() {
    return roleId;
  }

  public void setRoleId(UUID roleId) {
    this.roleId = roleId;
  }

  public ReadRolesDataRoleInner roleType(RoleType roleType) {
    this.roleType = roleType;
    return this;
  }

  /**
   * Get roleType
   * @return roleType
  */
  @NotNull @Valid 
  @Schema(name = "RoleType", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("RoleType")
  public RoleType getRoleType() {
    return roleType;
  }

  public void setRoleType(RoleType roleType) {
    this.roleType = roleType;
  }

  public ReadRolesDataRoleInner roleName(String roleName) {
    this.roleName = roleName;
    return this;
  }

  /**
   * Get roleName
   * @return roleName
  */
  
  @Schema(name = "RoleName", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("RoleName")
  public String getRoleName() {
    return roleName;
  }

  public void setRoleName(String roleName) {
    this.roleName = roleName;
  }

  public ReadRolesDataRoleInner relationshipId(UUID relationshipId) {
    this.relationshipId = relationshipId;
    return this;
  }

  /**
   * Get relationshipId
   * @return relationshipId
  */
  @Valid @Size(min = 36, max = 36) 
  @Schema(name = "RelationshipId", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("RelationshipId")
  public UUID getRelationshipId() {
    return relationshipId;
  }

  public void setRelationshipId(UUID relationshipId) {
    this.relationshipId = relationshipId;
  }

  public ReadRolesDataRoleInner customerRelationshipInvolvementType(CustomerRelationshipInvolvementTypeEnum customerRelationshipInvolvementType) {
    this.customerRelationshipInvolvementType = customerRelationshipInvolvementType;
    return this;
  }

  /**
   * Get customerRelationshipInvolvementType
   * @return customerRelationshipInvolvementType
  */
  
  @Schema(name = "CustomerRelationshipInvolvementType", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("CustomerRelationshipInvolvementType")
  public CustomerRelationshipInvolvementTypeEnum getCustomerRelationshipInvolvementType() {
    return customerRelationshipInvolvementType;
  }

  public void setCustomerRelationshipInvolvementType(CustomerRelationshipInvolvementTypeEnum customerRelationshipInvolvementType) {
    this.customerRelationshipInvolvementType = customerRelationshipInvolvementType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadRolesDataRoleInner readRolesDataRoleInner = (ReadRolesDataRoleInner) o;
    return Objects.equals(this.roleId, readRolesDataRoleInner.roleId) &&
        Objects.equals(this.roleType, readRolesDataRoleInner.roleType) &&
        Objects.equals(this.roleName, readRolesDataRoleInner.roleName) &&
        Objects.equals(this.relationshipId, readRolesDataRoleInner.relationshipId) &&
        Objects.equals(this.customerRelationshipInvolvementType, readRolesDataRoleInner.customerRelationshipInvolvementType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roleId, roleType, roleName, relationshipId, customerRelationshipInvolvementType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadRolesDataRoleInner {\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    roleType: ").append(toIndentedString(roleType)).append("\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    relationshipId: ").append(toIndentedString(relationshipId)).append("\n");
    sb.append("    customerRelationshipInvolvementType: ").append(toIndentedString(customerRelationshipInvolvementType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

