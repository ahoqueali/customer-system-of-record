/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.41).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.ahoque.customer.controller;

import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.ahoque.customer.model.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-03-11T20:44:13.669625822Z[GMT]")
@Validated
public interface CustomerController {

    @Operation(summary = "", description = "", tags={ "Customer" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReadCustomers.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/customers",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ReadCustomers> createCustomer(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody WriteCustomer body);


    @Operation(summary = "", description = "", tags={ "Customer" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReadContactPoints.class))) })
    @RequestMapping(value = "/customers/{CustomerId}/contacts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ReadContactPoints> getContactPoints(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("CustomerId") UUID customerId);


    @Operation(summary = "", description = "", tags={ "Customer" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReadCustomers.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Customer not found") })
    @RequestMapping(value = "/customers/{CustomerId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ReadCustomers> getCustomer(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("CustomerId") UUID customerId);


    @Operation(summary = "", description = "", tags={ "Customer" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReadCustomerLocations.class))) })
    @RequestMapping(value = "/customers/{CustomerId}/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ReadCustomerLocations> getCustomerLocations(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("CustomerId") UUID customerId);


    @Operation(summary = "", description = "", tags={ "Customer" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReadCustomers.class))) })
    @RequestMapping(value = "/customers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ReadCustomers> getCustomers();


    @Operation(summary = "", description = "", tags={ "Customer" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReadRelationship.class))) })
    @RequestMapping(value = "/customers/{CustomerId}/relationships",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ReadRelationship> getReleationship(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("CustomerId") UUID customerId);


    @Operation(summary = "", description = "", tags={ "Customer" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReadRoles.class))) })
    @RequestMapping(value = "/customers/{CustomerId}/roles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ReadRoles> getRole(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("CustomerId") UUID customerId);


    @Operation(summary = "", description = "Update customer", tags={ "Customer" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReadCustomers.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/customers/{CustomerId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<ReadCustomers> updateCustomer(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("CustomerId") UUID customerId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody WriteCustomer body);

}

